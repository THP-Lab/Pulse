---
description: 
globs: 
alwaysApply: false
---
<<<<<<< HEAD
---
description: 
globs: 
alwaysApply: false
---
=======
<<<<<<< HEAD
>>>>>>> 0bd1bb7 (feat: Initial commit - Pulsy application with interactive question cards and swipe functionality)
# Règles Cursor pour la création de PRD - Projet Pulsy

## Contexte du projet
Pulsy est une application web interactive de type Tinder pour répondre à des questions de référendum avec interface like/dislike. L'application utilise un système de cartes glissantes (swipe) pour recueillir les votes des utilisateurs.

## Stack technique actuelle
- **Frontend**: React 19 + TypeScript + Vite
- **Styling**: Tailwind CSS 4.1 + Radix UI
- **État**: React hooks (useState, useEffect)
- **Composants**: Radix UI + Lucide React
- **Build**: Vite avec TypeScript strict
- **Linting**: ESLint avec règles TypeScript
=======
# Règles Cursor pour la création de PRD - Projet Tinder-like Référendum

## Contexte du projet
Application de type Tinder pour répondre à des questions de référendum avec interface like/dislike, organisée par catégories thématiques.
>>>>>>> 6f8a7b4 (feat: Initial commit - Pulsy application with interactive question cards and swipe functionality)

## Structure du PRD (Product Requirements Document)

### 1. En-tête du document
```markdown
# PRD - [Nom de la fonctionnalité]
**Version**: 1.0
**Date**: [Date]
**Auteur**: [Nom]
**Statut**: Draft/Review/Approved
**Priorité**: High/Medium/Low
<<<<<<< HEAD
**Projet**: Pulsy - Application de Référendum Interactif
=======
>>>>>>> 6f8a7b4 (feat: Initial commit - Pulsy application with interactive question cards and swipe functionality)
```

### 2. Résumé exécutif
- **Objectif** : Description claire de la fonctionnalité
- **Valeur utilisateur** : Bénéfice principal pour l'utilisateur
- **Métriques de succès** : KPIs à mesurer
- **Timeline** : Estimation de développement

### 3. Contexte et problème
- **Problème actuel** : Ce qui ne fonctionne pas aujourd'hui
- **Impact** : Conséquences du problème
- **Opportunité** : Pourquoi résoudre maintenant
- **Personas** : Utilisateurs cibles

### 4. Solution proposée
- **Vue d'ensemble** : Description de la solution
- **Fonctionnalités clés** : Liste des features principales
- **Flux utilisateur** : Parcours utilisateur détaillé
- **Intégrations** : APIs et services externes

### 5. Spécifications techniques

<<<<<<< HEAD
#### Architecture actuelle
```typescript
// Structures de données existantes
interface Question {
  id: string;
  question: string;
  category: string;
}

interface UserVote {
  questionId: string;
  vote: 'like' | 'dislike' | 'idk';
  timestamp: Date;
}

interface AppData {
  questions: Question[];
}
```

#### Composants React existants
```typescript
// Structure des composants actuels
<App>
  <header>Pulsy</header>
  <main>
    <QuestionCard 
      question={currentQuestion}
      onVote={handleVote}
      onSwipe={handleSwipe}
    />
    <ProgressBar current={currentIndex} total={totalQuestions} />
    <Button onClick={resetGame}>Restart</Button>
  </main>
  <footer>Instructions</footer>
=======
#### Architecture
```typescript
// Exemples de structures de données
interface Question {
  id: string;
  text: string;
  category: Category;
  difficulty: 'easy' | 'medium' | 'hard';
  tags: string[];
  createdAt: Date;
}

interface UserVote {
  userId: string;
  questionId: string;
  vote: 'like' | 'dislike';
  timestamp: Date;
  category: string;
}

interface Category {
  id: string;
  name: string;
  description: string;
  icon: string;
  color: string;
  questionCount: number;
}
```

#### Composants React
```typescript
// Structure des composants principaux
<App>
  <Router>
    <Layout>
      <CategorySelector />
      <QuestionSwiper>
        <QuestionCard />
        <VoteButtons />
      </QuestionSwiper>
      <ProgressIndicator />
    </Layout>
  </Router>
>>>>>>> 6f8a7b4 (feat: Initial commit - Pulsy application with interactive question cards and swipe functionality)
</App>
```

### 6. Spécifications fonctionnelles

<<<<<<< HEAD
#### Fonctionnalités actuelles
1. **Interface de cartes glissantes**
   - Système de swipe gauche/droite
   - Support tactile et souris
   - Animations fluides

2. **Gestion des questions**
   - Chargement depuis JSON
   - Navigation séquentielle
   - Barre de progression

3. **Système de vote**
   - Vote like/dislike/idk
   - Sauvegarde des réponses
   - Possibilité de redémarrer

4. **Interface responsive**
   - Design mobile-first
   - Adaptation à tous les écrans
   - Composants accessibles

#### Règles métier actuelles
- Les questions sont présentées séquentiellement
- Un vote par question (pas de modification)
- Possibilité de redémarrer le questionnaire
- Chargement des données depuis un fichier JSON

### 7. Spécifications UI/UX

#### Design System actuel
```css
/* Palette de couleurs Tailwind */
--primary-color: #3B82F6;      /* Bleu principal */
--secondary-color: #6B7280;    /* Gris secondaire */
--success-color: #10B981;      /* Vert pour les votes positifs */
--danger-color: #EF4444;       /* Rouge pour les votes négatifs */
--text-color: #111827;         /* Texte principal */
=======
#### Fonctionnalités principales
1. **Sélection de catégorie**
   - Liste des catégories disponibles
   - Prévisualisation du nombre de questions
   - Navigation intuitive

2. **Interface de vote**
   - Carte de question avec texte clair
   - Boutons like/dislike avec feedback visuel
   - Animation de swipe
   - Progression visible

3. **Gestion des réponses**
   - Sauvegarde locale des votes
   - Synchronisation avec le backend
   - Historique des réponses

4. **Statistiques personnelles**
   - Résumé par catégorie
   - Tendances de vote
   - Comparaison avec la moyenne

#### Règles métier
- Un utilisateur ne peut voter qu'une fois par question
- Les questions sont présentées aléatoirement dans une catégorie
- Progression sauvegardée automatiquement
- Possibilité de changer son vote (avec limite de temps)

### 7. Spécifications UI/UX

#### Design System
```css
/* Palette de couleurs */
:root {
  --primary-color: #FF6B6B;      /* Rouge pour les votes négatifs */
  --secondary-color: #4ECDC4;    /* Vert pour les votes positifs */
  --neutral-color: #95A5A6;      /* Gris neutre */
  --background-color: #F8F9FA;   /* Fond clair */
  --text-color: #2C3E50;         /* Texte principal */
  --shadow: 0 4px 6px rgba(0,0,0,0.1);
}
>>>>>>> 6f8a7b4 (feat: Initial commit - Pulsy application with interactive question cards and swipe functionality)

/* Animations */
.swipe-left { transform: translateX(-100%); opacity: 0; }
.swipe-right { transform: translateX(100%); opacity: 0; }
.fade-in { animation: fadeIn 0.3s ease-in; }
```

<<<<<<< HEAD
#### Composants UI existants
- **QuestionCard** : Carte avec swipe, boutons séparés
- **ProgressBar** : Barre de progression avec pourcentage
- **Button** : Composants Radix UI avec variants
- **Layout** : Header, main, footer responsive

#### Responsive Design
- **Mobile First** : Optimisé pour les écrans tactiles
- **Breakpoints** : Tailwind CSS par défaut
- **Gestures** : Swipe, tap, hover
- **Accessibilité** : Radix UI compliant

### 8. Spécifications techniques détaillées

#### Gestion d'état actuelle
```typescript
// État principal dans App.tsx
const [data, setData] = useState<AppData | null>(null);
const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
const [userVotes, setUserVotes] = useState<UserVote[]>([]);
const [isLoading, setIsLoading] = useState(true);

// Actions principales
const handleVote = (vote: 'like' | 'dislike' | 'idk') => void;
const handleSwipe = (direction: 'left' | 'right') => void;
const nextQuestion = () => void;
const resetGame = () => void;
```

#### Performance actuelle
- **Lazy Loading** : Chargement des questions depuis JSON
- **Optimisation** : Composants React optimisés
- **Build** : Vite pour le développement rapide
- **Bundle** : Tree shaking automatique

### 9. Critères d'acceptation

#### Fonctionnels actuels
- [x] L'utilisateur peut naviguer entre les questions
- [x] L'utilisateur peut voter like/dislike/idk
- [x] La progression est affichée
- [x] L'utilisateur peut redémarrer
- [x] Support tactile et souris

#### Non-fonctionnels actuels
- [x] Temps de chargement rapide avec Vite
- [x] Interface responsive
- [x] Composants accessibles (Radix UI)
- [x] TypeScript strict

### 10. Évolutions futures

#### Fonctionnalités à ajouter
- **Catégories** : Organisation des questions par thème
- **Backend API** : Remplacement du JSON statique
- **Authentification** : Système de connexion
- **Statistiques** : Résultats et analytics
- **Admin Panel** : Gestion des questions

#### Améliorations techniques
- **State Management** : Zustand ou Redux Toolkit
- **Tests** : Vitest + React Testing Library
- **CI/CD** : GitHub Actions
- **Deployment** : Vercel/Netlify

### 11. Plan de test

#### Tests à implémenter
- Tests unitaires des composants
- Tests d'intégration des flux
- Tests E2E des parcours utilisateur
- Tests de performance

#### Outils recommandés
- **Vitest** : Tests unitaires
- **React Testing Library** : Tests des composants
- **Playwright** : Tests E2E
- **Lighthouse** : Performance
=======
#### Composants UI
- **QuestionCard** : Carte avec ombre, coins arrondis, typographie claire
- **VoteButtons** : Boutons circulaires avec icônes, états hover/active
- **CategorySelector** : Grille de catégories avec icônes et couleurs
- **ProgressBar** : Barre de progression avec pourcentage

#### Responsive Design
- **Mobile First** : Optimisé pour les écrans tactiles
- **Breakpoints** : 320px, 768px, 1024px, 1440px
- **Gestures** : Swipe, tap, long press
- **Accessibilité** : Support des lecteurs d'écran

### 8. Spécifications techniques détaillées

#### API Endpoints
```typescript
// Questions
GET /api/questions?category={categoryId}&limit={number}
GET /api/questions/{questionId}
POST /api/questions/{questionId}/vote

// Catégories
GET /api/categories
GET /api/categories/{categoryId}/stats

// Utilisateurs
GET /api/users/{userId}/votes
GET /api/users/{userId}/stats
```

#### Gestion d'état
```typescript
// Store principal avec Zustand
interface AppState {
  // Questions
  questions: Question[];
  currentQuestionIndex: number;
  currentCategory: Category | null;
  
  // Votes
  userVotes: UserVote[];
  isLoading: boolean;
  
  // Actions
  fetchQuestions: (categoryId: string) => Promise<void>;
  submitVote: (questionId: string, vote: 'like' | 'dislike') => void;
  nextQuestion: () => void;
}
```

#### Performance
- **Lazy Loading** : Chargement des questions par batch
- **Caching** : Cache local des questions et votes
- **Optimisation** : Images optimisées, code splitting
- **Monitoring** : Métriques de performance

### 9. Critères d'acceptation

#### Fonctionnels
- [ ] L'utilisateur peut sélectionner une catégorie
- [ ] Les questions s'affichent une par une
- [ ] L'utilisateur peut voter like/dislike
- [ ] La progression est sauvegardée
- [ ] Les statistiques sont calculées

#### Non-fonctionnels
- [ ] Temps de chargement < 2 secondes
- [ ] Support des écrans 320px à 1440px
- [ ] Accessibilité WCAG 2.1 AA
- [ ] Tests avec 80% de couverture

### 10. Risques et mitigation

#### Risques techniques
- **Performance** : Optimisation des animations et requêtes
- **Compatibilité** : Tests sur différents navigateurs
- **Données** : Validation et sanitisation des entrées

#### Risques produit
- **Adoption** : Tests utilisateurs précoces
- **Engagement** : Gamification et feedback
- **Qualité** : Tests automatisés et manuels

### 11. Plan de test

#### Tests unitaires
- Composants React avec React Testing Library
- Hooks personnalisés
- Utilitaires et services

#### Tests d'intégration
- Flux de vote complet
- Synchronisation avec l'API
- Gestion des erreurs

#### Tests E2E
- Parcours utilisateur complet
- Scénarios d'erreur
- Performance et accessibilité
>>>>>>> 6f8a7b4 (feat: Initial commit - Pulsy application with interactive question cards and swipe functionality)

### 12. Métriques et KPIs

#### Métriques techniques
- Temps de chargement des questions
<<<<<<< HEAD
- Performance des animations
- Taux d'erreur

#### Métriques produit
- Taux de completion du questionnaire
- Temps moyen par question
- Distribution des votes

### 13. Documentation utilisateur

#### Guide utilisateur actuel
- Comment naviguer entre les questions
- Comment voter (swipe ou boutons)
- Comment redémarrer le questionnaire
- Support des appareils tactiles

### 14. Structure du projet

#### Organisation actuelle
```
src/
├── components/
│   ├── ui/             # Composants Radix UI
│   ├── QuestionCard.tsx # Carte principale
│   └── ProgressBar.tsx  # Barre de progression
├── types/
│   └── index.ts        # Types TypeScript
├── lib/
│   └── utils.ts        # Utilitaires
├── assets/             # Ressources statiques
└── App.tsx             # Composant principal
```

#### Conventions de nommage
- **Composants** : PascalCase (QuestionCard)
- **Fonctions** : camelCase (handleVote)
- **Types** : PascalCase (UserVote)
- **Fichiers** : kebab-case (question-card.tsx)

### 15. Déploiement

#### Environnements
- **Développement** : `pnpm dev` (localhost:5173)
- **Production** : `pnpm build` + serveur statique
- **Preview** : `pnpm preview`

#### Scripts disponibles
- `pnpm dev` - Serveur de développement
- `pnpm build` - Build de production
- `pnpm preview` - Prévisualisation
<<<<<<< HEAD
- `pnpm lint` - Vérification du code
=======
- `pnpm lint` - Vérification du code
=======
- Taux d'erreur des votes
- Performance des animations

#### Métriques produit
- Taux de participation par catégorie
- Temps moyen par question
- Taux de rétention des utilisateurs

### 13. Documentation utilisateur

#### Guide utilisateur
- Comment sélectionner une catégorie
- Comment voter sur une question
- Comment consulter ses statistiques
- FAQ et dépannage

#### Documentation technique
- Architecture et composants
- API et intégrations
- Déploiement et maintenance
>>>>>>> 6f8a7b4 (feat: Initial commit - Pulsy application with interactive question cards and swipe functionality)
>>>>>>> 0bd1bb7 (feat: Initial commit - Pulsy application with interactive question cards and swipe functionality)
