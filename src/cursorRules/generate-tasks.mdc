---
description: 
globs: 
alwaysApply: false
---
<<<<<<< HEAD
---
description: 
globs: 
alwaysApply: false
---
=======
<<<<<<< HEAD
>>>>>>> 0bd1bb7 (feat: Initial commit - Pulsy application with interactive question cards and swipe functionality)
# R√®gles Cursor pour la g√©n√©ration de t√¢ches - Projet Pulsy

## Contexte du projet
Pulsy est une application web interactive de type Tinder o√π les utilisateurs r√©pondent √† des questions de type r√©f√©rendum (pour/contre) en utilisant un syst√®me de cartes glissantes. L'application utilise un syst√®me de swipe pour recueillir les votes des utilisateurs.

## Stack technique actuelle
- **Frontend**: React 19 + TypeScript + Vite
- **Styling**: Tailwind CSS 4.1 + Radix UI
- **√âtat**: React hooks (useState, useEffect)
- **Composants**: Radix UI + Lucide React
- **Build**: Vite avec TypeScript strict
- **Linting**: ESLint avec r√®gles TypeScript
=======
# R√®gles Cursor pour la g√©n√©ration de t√¢ches - Projet Tinder-like R√©f√©rendum

## Contexte du projet
Application mobile/web de type Tinder o√π les utilisateurs r√©pondent √† des questions de type r√©f√©rendum (pour/contre) organis√©es par cat√©gories. Interface avec boutons like/dislike pour les r√©ponses.

## Stack technique
- **Frontend**: React 19 + TypeScript + Vite
- **Styling**: CSS modules ou styled-components
- **√âtat**: React hooks (useState, useContext) ou Zustand
- **Navigation**: React Router
- **API**: Fetch ou Axios
- **Tests**: Vitest + React Testing Library
>>>>>>> 6f8a7b4 (feat: Initial commit - Pulsy application with interactive question cards and swipe functionality)

## R√®gles de g√©n√©ration de t√¢ches

### 1. Structure des t√¢ches
Chaque t√¢che doit inclure :
- **Titre** : Action claire et concise
- **Description** : Contexte et objectifs
- **Crit√®res d'acceptation** : Liste num√©rot√©e des fonctionnalit√©s attendues
- **Estimation** : Temps en heures (1-8h)
- **Priorit√©** : High/Medium/Low
- **Tags** : [UI], [API], [State], [Test], [Bug], [Feature]

### 2. Cat√©gories de t√¢ches

#### üé® Interface utilisateur (UI)
- Composants r√©utilisables (boutons, cartes, modales)
- Animations de swipe (like/dislike)
<<<<<<< HEAD
- Design responsive mobile-first avec Tailwind
=======
- Design responsive mobile-first
>>>>>>> 6f8a7b4 (feat: Initial commit - Pulsy application with interactive question cards and swipe functionality)
- Th√®me et palette de couleurs coh√©rents
- Indicateurs visuels de progression

#### üîÑ Logique m√©tier (Business Logic)
<<<<<<< HEAD
- Gestion des questions et votes
- Syst√®me de progression
- Algorithme de navigation
=======
- Gestion des cat√©gories de questions
- Syst√®me de scoring et matching
- Algorithme de recommandation
>>>>>>> 6f8a7b4 (feat: Initial commit - Pulsy application with interactive question cards and swipe functionality)
- Gestion des r√©ponses utilisateur
- Statistiques et analytics

#### üìä Gestion d'√©tat (State Management)
- √âtat global de l'application
- Cache des questions et r√©ponses
<<<<<<< HEAD
- Synchronisation avec le backend (futur)
=======
- Synchronisation avec le backend
>>>>>>> 6f8a7b4 (feat: Initial commit - Pulsy application with interactive question cards and swipe functionality)
- Gestion des sessions utilisateur
- Persistance locale

#### üîå API et donn√©es (API & Data)
<<<<<<< HEAD
- Endpoints REST/GraphQL (futur)
=======
- Endpoints REST/GraphQL
>>>>>>> 6f8a7b4 (feat: Initial commit - Pulsy application with interactive question cards and swipe functionality)
- Mod√®les de donn√©es TypeScript
- Validation des donn√©es
- Gestion des erreurs
- Optimisation des requ√™tes

#### üé® Tests et qualit√© (Testing & Quality)
- Tests unitaires des composants
- Tests d'int√©gration des flux
- Tests E2E des parcours utilisateur
- Validation des performances
- Accessibilit√© (WCAG)

### 3. Conventions de nommage

#### Composants React
```typescript
// Composants de pr√©sentation
QuestionCard.tsx
<<<<<<< HEAD
ProgressBar.tsx
=======
CategorySelector.tsx
>>>>>>> 6f8a7b4 (feat: Initial commit - Pulsy application with interactive question cards and swipe functionality)
VoteButtons.tsx

// Composants de conteneur
QuestionContainer.tsx
<<<<<<< HEAD
VoteContainer.tsx

// Pages
HomePage.tsx
=======
CategoryContainer.tsx

// Pages
HomePage.tsx
CategoryPage.tsx
>>>>>>> 6f8a7b4 (feat: Initial commit - Pulsy application with interactive question cards and swipe functionality)
ResultsPage.tsx
```

#### Types TypeScript
```typescript
// Interfaces principales
interface Question {
  id: string;
<<<<<<< HEAD
  question: string;
  category: string;
}

interface UserVote {
  questionId: string;
  vote: 'like' | 'dislike' | 'idk';
  timestamp: Date;
}

interface AppData {
  questions: Question[];
}
```

#### Styles Tailwind
```css
/* Classes Tailwind avec BEM-like naming */
=======
  text: string;
  category: string;
  tags: string[];
}

interface UserResponse {
  questionId: string;
  vote: 'like' | 'dislike';
  timestamp: Date;
}

interface Category {
  id: string;
  name: string;
  description: string;
  questionCount: number;
}
```

#### Styles CSS
```css
/* BEM methodology */
>>>>>>> 6f8a7b4 (feat: Initial commit - Pulsy application with interactive question cards and swipe functionality)
.question-card {}
.question-card__header {}
.question-card__content {}
.question-card--active {}

.vote-buttons {}
.vote-buttons__like {}
.vote-buttons__dislike {}
```

### 4. Patterns d'architecture

<<<<<<< HEAD
#### Structure des dossiers actuelle
```
src/
‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îú‚îÄ‚îÄ ui/           # Composants Radix UI
‚îÇ   ‚îú‚îÄ‚îÄ QuestionCard.tsx # Carte principale
‚îÇ   ‚îî‚îÄ‚îÄ ProgressBar.tsx  # Barre de progression
‚îú‚îÄ‚îÄ types/            # Types TypeScript
‚îú‚îÄ‚îÄ lib/              # Utilitaires
‚îú‚îÄ‚îÄ assets/           # Ressources statiques
‚îî‚îÄ‚îÄ App.tsx           # Composant principal
```

#### Hooks personnalis√©s √† cr√©er
```typescript
// Exemples de hooks √† d√©velopper
useQuestions()
useVoting(questionId: string)
useProgress(currentIndex: number, total: number)
useSwipeGestures()
useLocalStorage(key: string)
=======
#### Structure des dossiers
```
src/
‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îú‚îÄ‚îÄ ui/           # Composants r√©utilisables
‚îÇ   ‚îú‚îÄ‚îÄ features/     # Composants sp√©cifiques aux fonctionnalit√©s
‚îÇ   ‚îî‚îÄ‚îÄ layout/       # Composants de mise en page
‚îú‚îÄ‚îÄ hooks/            # Custom hooks
‚îú‚îÄ‚îÄ services/         # Services API
‚îú‚îÄ‚îÄ stores/           # Gestion d'√©tat
‚îú‚îÄ‚îÄ types/            # Types TypeScript
‚îú‚îÄ‚îÄ utils/            # Utilitaires
‚îî‚îÄ‚îÄ pages/            # Pages de l'application
```

#### Hooks personnalis√©s
```typescript
// Exemples de hooks √† cr√©er
useQuestions(categoryId: string)
useVoting(questionId: string)
useCategories()
useUserProfile()
useMatchmaking()
>>>>>>> 6f8a7b4 (feat: Initial commit - Pulsy application with interactive question cards and swipe functionality)
```

### 5. Crit√®res de qualit√©

#### Performance
- Lazy loading des composants
<<<<<<< HEAD
- Optimisation des animations
=======
- Optimisation des images
>>>>>>> 6f8a7b4 (feat: Initial commit - Pulsy application with interactive question cards and swipe functionality)
- Debouncing des interactions
- Cache intelligent des donn√©es

#### Accessibilit√©
- Navigation au clavier
- Support des lecteurs d'√©cran
- Contraste des couleurs
- Textes alternatifs

#### UX/UI
- Feedback visuel imm√©diat
- √âtats de chargement
- Gestion des erreurs
- Animations fluides

### 6. Exemples de t√¢ches

<<<<<<< HEAD
#### T√¢che UI - Am√©lioration QuestionCard
**Titre**: Am√©liorer l'animation de swipe du QuestionCard
**Description**: Optimiser les animations de swipe pour une exp√©rience plus fluide
**Crit√®res d'acceptation**:
1. Animation de swipe plus fluide avec easing
2. Feedback visuel pendant le swipe
3. Support des gestes tactiles am√©lior√©
4. Performance optimis√©e sur mobile
5. Tests unitaires pour les animations
**Estimation**: 3h
**Priorit√©**: Medium
**Tags**: [UI], [Test]

#### T√¢che API - Service de questions
**Titre**: Cr√©er un service pour g√©rer les questions
**Description**: Extraire la logique de gestion des questions dans un service r√©utilisable
**Crit√®res d'acceptation**:
1. Service pour charger les questions depuis JSON
=======
#### T√¢che UI - Composant QuestionCard
**Titre**: Cr√©er le composant QuestionCard avec animation de swipe
**Description**: D√©velopper un composant de carte pour afficher les questions avec animation de swipe like/dislike
**Crit√®res d'acceptation**:
1. Affichage du texte de la question
2. Boutons like/dislike avec ic√¥nes
3. Animation de swipe vers la gauche/droite
4. Responsive design mobile-first
5. Tests unitaires avec 80% de couverture
**Estimation**: 4h
**Priorit√©**: High
**Tags**: [UI], [Test]

#### T√¢che API - Service de questions
**Titre**: Impl√©menter le service API pour r√©cup√©rer les questions par cat√©gorie
**Description**: Cr√©er un service pour g√©rer les appels API vers le backend
**Crit√®res d'acceptation**:
1. Fonction pour r√©cup√©rer les questions par cat√©gorie
>>>>>>> 6f8a7b4 (feat: Initial commit - Pulsy application with interactive question cards and swipe functionality)
2. Gestion des erreurs et retry
3. Cache des donn√©es avec TTL
4. Types TypeScript pour les r√©ponses
5. Tests d'int√©gration
<<<<<<< HEAD
**Estimation**: 2h
**Priorit√©**: High
**Tags**: [API], [Test]

#### T√¢che State - Hook personnalis√© pour les votes
**Titre**: Cr√©er un hook useVoting pour g√©rer les votes
**Description**: Extraire la logique de vote dans un hook r√©utilisable
**Crit√®res d'acceptation**:
1. Hook useVoting avec gestion des votes
2. Persistance locale des votes
3. Validation des donn√©es
4. Gestion des erreurs
5. Tests unitaires du hook
**Estimation**: 2h
**Priorit√©**: High
**Tags**: [State], [Test]

=======
**Estimation**: 3h
**Priorit√©**: High
**Tags**: [API], [Test]

>>>>>>> 6f8a7b4 (feat: Initial commit - Pulsy application with interactive question cards and swipe functionality)
### 7. Workflow de d√©veloppement

#### Branches Git
- `main` : Code de production
- `develop` : Branche de d√©veloppement
- `feature/task-name` : Nouvelles fonctionnalit√©s
- `bugfix/issue-description` : Corrections de bugs

#### Commits
```
<<<<<<< HEAD
feat: am√©liorer l'animation de swipe du QuestionCard
fix: corriger la gestion des votes sur mobile
refactor: extraire la logique de vote dans un hook
=======
feat: ajouter le composant QuestionCard
fix: corriger l'animation de swipe sur mobile
refactor: optimiser les performances du service API
>>>>>>> 6f8a7b4 (feat: Initial commit - Pulsy application with interactive question cards and swipe functionality)
test: ajouter les tests pour useVoting hook
docs: mettre √† jour la documentation des composants
```

#### Code Review
- V√©rification des types TypeScript
- Tests unitaires pr√©sents
- Respect des conventions de nommage
- Performance et accessibilit√©
- Documentation des composants complexes
<<<<<<< HEAD

### 8. √âvolutions futures

#### Fonctionnalit√©s √† d√©velopper
- **Cat√©gories** : Organisation des questions par th√®me
- **Backend API** : Remplacement du JSON statique
- **Authentification** : Syst√®me de connexion
- **Statistiques** : R√©sultats et analytics
- **Admin Panel** : Gestion des questions

#### Am√©liorations techniques
- **State Management** : Zustand ou Redux Toolkit
- **Tests** : Vitest + React Testing Library
- **CI/CD** : GitHub Actions
- **Deployment** : Vercel/Netlify

### 9. T√¢ches prioritaires

#### T√¢ches High Priority
1. **Tests unitaires** : Ajouter Vitest et tests pour les composants
2. **Hook useVoting** : Extraire la logique de vote
3. **Service de questions** : Cr√©er un service r√©utilisable
4. **Gestion d'erreurs** : Am√©liorer la gestion des erreurs
5. **Accessibilit√©** : Am√©liorer l'accessibilit√© des composants

#### T√¢ches Medium Priority
1. **Animations** : Optimiser les animations de swipe
2. **Performance** : Optimiser le rendu des composants
3. **Responsive** : Am√©liorer l'adaptation mobile
4. **Documentation** : Documenter les composants
5. **CI/CD** : Mettre en place GitHub Actions

#### T√¢ches Low Priority
1. **Th√®me** : Syst√®me de th√®me sombre/clair
2. **Internationalisation** : Support multi-langues
3. **Analytics** : Int√©gration d'analytics
4. **PWA** : Transformer en Progressive Web App
5. **Offline** : Support hors ligne

### 10. M√©triques de qualit√©

#### M√©triques techniques
- Couverture de tests > 80%
- Performance Lighthouse > 90
- Accessibilit√© WCAG 2.1 AA
- Bundle size < 500KB

#### M√©triques produit
- Temps de chargement < 2s
- Taux d'erreur < 1%
- Taux de completion > 90%
<<<<<<< HEAD
- Satisfaction utilisateur > 4.5/5
=======
- Satisfaction utilisateur > 4.5/5
=======
```

## Fichier create-prd.mdc

```markdown:create-prd.mdc
# R√®gles Cursor pour la cr√©ation de PRD - Projet Tinder-like R√©f√©rendum

## Contexte du projet
Application de type Tinder pour r√©pondre √† des questions de r√©f√©rendum avec interface like/dislike, organis√©e par cat√©gories th√©matiques.

## Structure du PRD (Product Requirements Document)

### 1. En-t√™te du document
```markdown
# PRD - [Nom de la fonctionnalit√©]
**Version**: 1.0
**Date**: [Date]
**Auteur**: [Nom]
**Statut**: Draft/Review/Approved
**Priorit√©**: High/Medium/Low
```

### 2. R√©sum√© ex√©cutif
- **Objectif** : Description claire de la fonctionnalit√©
- **Valeur utilisateur** : B√©n√©fice principal pour l'utilisateur
- **M√©triques de succ√®s** : KPIs √† mesurer
- **Timeline** : Estimation de d√©veloppement

### 3. Contexte et probl√®me
- **Probl√®me actuel** : Ce qui ne fonctionne pas aujourd'hui
- **Impact** : Cons√©quences du probl√®me
- **Opportunit√©** : Pourquoi r√©soudre maintenant
- **Personas** : Utilisateurs cibles

### 4. Solution propos√©e
- **Vue d'ensemble** : Description de la solution
- **Fonctionnalit√©s cl√©s** : Liste des features principales
- **Flux utilisateur** : Parcours utilisateur d√©taill√©
- **Int√©grations** : APIs et services externes

### 5. Sp√©cifications techniques

#### Architecture
```typescript
// Exemples de structures de donn√©es
interface Question {
  id: string;
  text: string;
  category: Category;
  difficulty: 'easy' | 'medium' | 'hard';
  tags: string[];
  createdAt: Date;
}

interface UserVote {
  userId: string;
  questionId: string;
  vote: 'like' | 'dislike';
  timestamp: Date;
  category: string;
}

interface Category {
  id: string;
  name: string;
  description: string;
  icon: string;
  color: string;
  questionCount: number;
}
```

#### Composants React
```typescript
// Structure des composants principaux
<App>
  <Router>
    <Layout>
      <CategorySelector />
      <QuestionSwiper>
        <QuestionCard />
        <VoteButtons />
      </QuestionSwiper>
      <ProgressIndicator />
    </Layout>
  </Router>
</App>
```

### 6. Sp√©cifications fonctionnelles

#### Fonctionnalit√©s principales
1. **S√©lection de cat√©gorie**
   - Liste des cat√©gories disponibles
   - Pr√©visualisation du nombre de questions
   - Navigation intuitive

2. **Interface de vote**
   - Carte de question avec texte clair
   - Boutons like/dislike avec feedback visuel
   - Animation de swipe
   - Progression visible

3. **Gestion des r√©ponses**
   - Sauvegarde locale des votes
   - Synchronisation avec le backend
   - Historique des r√©ponses

4. **Statistiques personnelles**
   - R√©sum√© par cat√©gorie
   - Tendances de vote
   - Comparaison avec la moyenne

#### R√®gles m√©tier
- Un utilisateur ne peut voter qu'une fois par question
- Les questions sont pr√©sent√©es al√©atoirement dans une cat√©gorie
- Progression sauvegard√©e automatiquement
- Possibilit√© de changer son vote (avec limite de temps)

### 7. Sp√©cifications UI/UX

#### Design System
```css
/* Palette de couleurs */
:root {
  --primary-color: #FF6B6B;      /* Rouge pour les votes n√©gatifs */
  --secondary-color: #4ECDC4;    /* Vert pour les votes positifs */
  --neutral-color: #95A5A6;      /* Gris neutre */
  --background-color: #F8F9FA;   /* Fond clair */
  --text-color: #2C3E50;         /* Texte principal */
  --shadow: 0 4px 6px rgba(0,0,0,0.1);
}

/* Animations */
.swipe-left { transform: translateX(-100%); opacity: 0; }
.swipe-right { transform: translateX(100%); opacity: 0; }
.fade-in { animation: fadeIn 0.3s ease-in; }
```

#### Composants UI
- **QuestionCard** : Carte avec ombre, coins arrondis, typographie claire
- **VoteButtons** : Boutons circulaires avec ic√¥nes, √©tats hover/active
- **CategorySelector** : Grille de cat√©gories avec ic√¥nes et couleurs
- **ProgressBar** : Barre de progression avec pourcentage

#### Responsive Design
- **Mobile First** : Optimis√© pour les √©crans tactiles
- **Breakpoints** : 320px, 768px, 1024px, 1440px
- **Gestures** : Swipe, tap, long press
- **Accessibilit√©** : Support des lecteurs d'√©cran

### 8. Sp√©cifications techniques d√©taill√©es

#### API Endpoints
```typescript
// Questions
GET /api/questions?category={categoryId}&limit={number}
GET /api/questions/{questionId}
POST /api/questions/{questionId}/vote

// Cat√©gories
GET /api/categories
GET /api/categories/{categoryId}/stats

// Utilisateurs
GET /api/users/{userId}/votes
GET /api/users/{userId}/stats
```

#### Gestion d'√©tat
```typescript
// Store principal avec Zustand
interface AppState {
  // Questions
  questions: Question[];
  currentQuestionIndex: number;
  currentCategory: Category | null;
  
  // Votes
  userVotes: UserVote[];
  isLoading: boolean;
  
  // Actions
  fetchQuestions: (categoryId: string) => Promise<void>;
  submitVote: (questionId: string, vote: 'like' | 'dislike') => void;
  nextQuestion: () => void;
}
```

#### Performance
- **Lazy Loading** : Chargement des questions par batch
- **Caching** : Cache local des questions et votes
- **Optimisation** : Images optimis√©es, code splitting
- **Monitoring** : M√©triques de performance

### 9. Crit√®res d'acceptation

#### Fonctionnels
- [ ] L'utilisateur peut s√©lectionner une cat√©gorie
- [ ] Les questions s'affichent une par une
- [ ] L'utilisateur peut voter like/dislike
- [ ] La progression est sauvegard√©e
- [ ] Les statistiques sont calcul√©es

#### Non-fonctionnels
- [ ] Temps de chargement < 2 secondes
- [ ] Support des √©crans 320px √† 1440px
- [ ] Accessibilit√© WCAG 2.1 AA
- [ ] Tests avec 80% de couverture

### 10. Risques et mitigation

#### Risques techniques
- **Performance** : Optimisation des animations et requ√™tes
- **Compatibilit√©** : Tests sur diff√©rents navigateurs
- **Donn√©es** : Validation et sanitisation des entr√©es

#### Risques produit
- **Adoption** : Tests utilisateurs pr√©coces
- **Engagement** : Gamification et feedback
- **Qualit√©** : Tests automatis√©s et manuels

### 11. Plan de test

#### Tests unitaires
- Composants React avec React Testing Library
- Hooks personnalis√©s
- Utilitaires et services

#### Tests d'int√©gration
- Flux de vote complet
- Synchronisation avec l'API
- Gestion des erreurs

#### Tests E2E
- Parcours utilisateur complet
- Sc√©narios d'erreur
- Performance et accessibilit√©

### 12. M√©triques et KPIs

#### M√©triques techniques
- Temps de chargement des questions
- Taux d'erreur des votes
- Performance des animations

#### M√©triques produit
- Taux de participation par cat√©gorie
- Temps moyen par question
- Taux de r√©tention des utilisateurs

### 13. Documentation utilisateur

#### Guide utilisateur
- Comment s√©lectionner une cat√©gorie
- Comment voter sur une question
- Comment consulter ses statistiques
- FAQ et d√©pannage

#### Documentation technique
- Architecture et composants
- API et int√©grations
- D√©ploiement et maintenance
```
>>>>>>> 6f8a7b4 (feat: Initial commit - Pulsy application with interactive question cards and swipe functionality)

>>>>>>> 0bd1bb7 (feat: Initial commit - Pulsy application with interactive question cards and swipe functionality)
